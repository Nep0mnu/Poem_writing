from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message, KeyboardButton, ReplyKeyboardMarkup
from sqlalchemy import select, desc
from bot.database import Poem, AsyncSessionLocal
from bot.handlers.save_poetry import get_poems_with_pagination, send_poem_with_buttons
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import keyboards as kb
from aiogram.exceptions import TelegramBadRequest
import asyncio
class PoemEditing(StatesGroup):
    editing_poem = State()  # State for editing a poem
    new_line_poem = State()
    naming_poem = State()
    window = State()
    find_rhyme = State()
router_edit_poetry = Router()

@router_edit_poetry.callback_query(lambda c: c.data.startswith('remove_poetry_'))
async def remove_poetry(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    message_id = data.get("message_id")
    try:
        await callback.bot.delete_message(chat_id=chat_id, message_id=message_id)
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏–ª–∏ –¥—Ä—É–≥—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    _, _, poem_id = callback.data.split("_")
    poem_id = int(poem_id)
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    async with AsyncSessionLocal() as session:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∏—Ö–∞ –ø–æ id
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalars().first()

        # –ï—Å–ª–∏ —Å—Ç–∏—Ö –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if poem:
            await session.delete(poem)
            await session.commit()
            await callback.answer("–°—Ç–∏—Ö —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            await callback.answer("–°—Ç–∏—Ö —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –í–´–ë–û–† –°–¢–ò–•–ê –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
@router_edit_poetry.callback_query(lambda c: c.data.startswith('edit_poetry_'))
async def edit_poetry(callback: CallbackQuery):
    _, _, poem_id = callback.data.split("_")
    poem_id = int(poem_id)

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalar_one_or_none()
        poem_lines = poem.text.split("\n")

        buttons = [
            [InlineKeyboardButton(text=f"{i + 1}. {line[:40]}", callback_data=f"edit_line_{poem_id}_{i}")]
            for i, line in enumerate(poem_lines)
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏—Ö:\n\n<pre>{poem.text}</pre>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è.")

# –í–´–ë–û–† –°–¢–†–û–ö–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø/–£–î–ê–õ–ï–ù–ò–Ø
@router_edit_poetry.callback_query(lambda c: c.data.startswith("edit_line_"))
async def edit_line(callback: CallbackQuery):
    _, _, poem_id, line_index = callback.data.split("_")
    poem_id, line_index = int(poem_id), int(line_index)

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalar_one_or_none()

        if not poem:
            await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        poem_lines = poem.text.split("\n")

        if not (0 <= line_index < len(poem_lines)):
            await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        selected_line = poem_lines[line_index]

        buttons = [
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{poem_id}_{line_index}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{poem_id}_{line_index}")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{poem_id}")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–æ–∫—É:\n\n<pre>{selected_line}</pre>",
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–û–ö–ò
@router_edit_poetry.callback_query(lambda c: c.data.startswith("edit_"))
async def start_editing(callback: CallbackQuery, state: FSMContext):
    _, poem_id, line_index = callback.data.split("_")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if not poem_id.isdigit() or not line_index.isdigit():
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    poem_id, line_index = int(poem_id), int(line_index)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalar_one_or_none()

        if not poem:
            await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        poem_lines = poem.text.split("\n")

        if not (0 <= line_index < len(poem_lines)):
            await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        selected_line = poem_lines[line_index]

        cancel_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,  # –î–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
            one_time_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n<pre>{selected_line}</pre>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\".",
            parse_mode="HTML",
            reply_markup=cancel_keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º poem_id –∏ line_index –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(poem_id=poem_id, line_index=line_index)
        await state.set_state(PoemEditing.editing_poem)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


# –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–ô –°–¢–†–û–ö–ò
@router_edit_poetry.message(PoemEditing.editing_poem)
async def edit_poem_line(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    user_data = await state.get_data()
    poem_id = user_data.get("poem_id")
    line_index = user_data.get("line_index")

    if poem_id is None or line_index is None:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã.", reply_markup=kb.main)
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalar_one_or_none()

        if not poem:
            await message.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb.main)
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return

        poem_lines = poem.text.split("\n")

        if not (0 <= line_index < len(poem_lines)):
            await message.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=kb.main)
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        poem_lines[line_index] = message.text
        poem.text = "\n".join(poem_lines)
        await message.answer(f"–°—Ç—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞",eply_markup=kb.main)
        poem_zxc, total, poem_ids = await get_poems_with_pagination(message.from_user.id, poem_id=poem_id)
        await send_poem_with_buttons(message, poem, total=total, poem_id=poem_id, poem_ids=poem_ids,state=state)
        await session.commit()

    await state.clear()

@router_edit_poetry.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_line(callback: CallbackQuery):
    _, poem_id, line_index = callback.data.split("_")
    line_index = int(line_index)
    poem_id = int(poem_id)
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalar_one_or_none()

        if not poem:
            await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        poem_lines = poem.text.split("\n")

        if 0 <= line_index < len(poem_lines):
            await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id)

            buttons = [
                [InlineKeyboardButton(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{poem_id}_{line_index}")],
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{poem_id}")]
            ]
            keyboard_dec = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback.message.answer(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É:\n\n<pre>{poem_lines[line_index]}</pre>",
                parse_mode="HTML",
                reply_markup=keyboard_dec
            )
        else:
            await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@router_edit_poetry.callback_query(lambda c: c.data.startswith("confirm_delete"))
async def confirm_delete(callback: CallbackQuery, state: FSMContext):
    _,_, poem_id, line_index = callback.data.split("_")
    poem_id, line_index = int(poem_id), int(line_index)

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalar_one_or_none()

        if not poem:
            await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        poem_lines = poem.text.split("\n")

        if 0 <= line_index < len(poem_lines):
            deleted_line = poem_lines.pop(line_index)
            poem.text = "\n".join(poem_lines)
            await session.commit()
            await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id)
            await callback.answer(
                f"‚úÖ –°—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
            poem, total, poem_ids = await get_poems_with_pagination(callback.from_user.id, poem_id=poem_id)

            if poem is None:
                await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∏—Ö–∞
            await send_poem_with_buttons(callback.message, poem, total=total, poem_id=poem_id, poem_ids=poem_ids,state=state)
        else:
            await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@router_edit_poetry.callback_query(lambda c: c.data.startswith("cancel_edit"))
async def cancel_edit(callback: CallbackQuery, state =FSMContext):
    _, _, poem_id= callback.data.split("_")
    poem_id = int(poem_id)
    poem, total, poem_ids = await get_poems_with_pagination(callback.from_user.id, poem_id=poem_id)
    await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id)

    if poem is None:
        await callback.answer("–û—à–∏–±–∫–∞: —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å—Ç–∏—Ö–∞
    await send_poem_with_buttons(callback.message, poem, total=total, poem_id=poem_id, poem_ids=poem_ids,state=state)


@router_edit_poetry.callback_query(lambda c: c.data.startswith("new_line"))
async def new_back_line(callback: CallbackQuery, state: FSMContext):
    _, _, poem_id = callback.data.split("_")
    poem_id = int(poem_id)
    await state.update_data(poem_id = poem_id)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as session:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –ø–æ –µ–≥–æ ID
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalar_one_or_none()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–æ –ª–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
    if poem is None:
        await callback.answer("–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è
    poem_lines = poem.text.split("\n")  # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –∏–∑ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(poem_lines=poem_lines)
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sent_message = await callback.message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ!")
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(PoemEditing.new_line_poem)

@router_edit_poetry.message(PoemEditing.new_line_poem)
async def write_poem(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    user_data = await state.get_data()
    poem_lines = user_data.get("poem_lines", [])
    poem_id = user_data.get("poem_id")
    poem_id = int(poem_id)
    title = await get_poem_title(poem_id)
    if message.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        await message.delete()
        user_data = await state.get_data()
        poem_lines = user_data.get("poem_lines", [])
        poem_text = "\n".join(poem_lines)
        await state.update_data(poem_text=poem_text)
        last_bot_message_id = user_data.get("last_bot_message_id")
        await message.bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
        sent_message = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è.\n–¢–≤–æ–µ —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n<pre>{title}</pre>",
            parse_mode="HTML",reply_markup=kb.edit_poetry)
        await state.update_data(last_bot_message_id=sent_message.message_id)
        await state.set_state(PoemEditing.naming_poem)
        return
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ—á–∫—É":
        await message.delete()
        user_data = await state.get_data()
        poem_lines = user_data.get("poem_lines", [])
        if not poem_lines:
            await message.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏!")
            await state.set_state(PoemEditing.new_line_poem)
            return
        buttons = [
            [InlineKeyboardButton(text=f"{i + 1}. {line[:40]}", callback_data=f"data_conversayshn_line_{i}")]
            for i, line in enumerate(poem_lines)
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if "editing_line" in user_data:
        editing_index = user_data["editing_line"]
        if 0 <= editing_index < len(poem_lines):
            poem_lines[editing_index] = message.text
            await state.update_data(poem_lines=poem_lines)
        await state.update_data(editing_line=None)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        poem_lines.append(message.text)
        await state.update_data(poem_lines=poem_lines)
    formatted_poem = "\n".join(poem_lines)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ.
    if 'poem_message_id' not in user_data:
        sent_message = await message.answer(
            '–ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"',
            reply_markup=kb.edit_poetry
        )
        last_bot_message_id = user_data.get("last_bot_message_id")
        try:
            if last_bot_message_id:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await state.update_data(last_bot_message_id=sent_message.message_id)
        poem_message = await message.answer(
            f"<pre>{formatted_poem}</pre>",
            parse_mode="HTML"
        )
        await state.update_data(poem_message_id=poem_message.message_id)
    else:
        await message.bot.edit_message_text(
            f"<pre>{formatted_poem}</pre>",
            chat_id=message.chat.id,
            message_id=user_data['poem_message_id'],
            parse_mode="HTML",
        )
    await message.delete()
async def get_poem_title(poem_id: int) -> str | None:
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Poem.title).where(Poem.id == poem_id)
        )
        title = result.scalar_one_or_none()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ None
        return title

@router_edit_poetry.message(PoemEditing.naming_poem)
async def confirm_save_poem(message: Message, state: FSMContext):
    user_data = await state.get_data()
    poem_text = user_data.get("poem_text")
    poem_id = user_data.get("poem_id")
    if not poem_text or not poem_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –∏–ª–∏ –µ–≥–æ ID.")
        return
    title = message.text  # –ë–µ—Ä–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    await update_poem(poem_id=poem_id, title=title, text=poem_text)
    await message.answer(f'–°—Ç–∏—Ö "{title}" –æ–±–Ω–æ–≤–ª—ë–Ω! ‚ú®', reply_markup=kb.main)
    await message.delete()
    last_bot_message_id = user_data.get("last_bot_message_id")
    await message.bot.delete_message(chat_id=message.chat.id, message_id=last_bot_message_id)
    await message.bot.delete_message(message.message.chat.id, message.message.message_id)
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def update_poem(poem_id: int, title: str, text: str):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Poem).where(Poem.id == poem_id))
        poem = result.scalar_one_or_none()

        if poem:
            poem.title = title
            poem.text = text
            await session.commit()
